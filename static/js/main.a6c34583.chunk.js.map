{"version":3,"sources":["recipes.js","App.js","serviceWorker.js","index.js"],"names":["Recipes","title","image","ingredients","className","src","alt","map","ingredient","text","App","useState","recipies","setRecipies","search","setSearch","query","setQuery","useEffect","a","fetch","response","json","data","hits","console","log","getRecipes","onSubmit","e","preventDefault","type","value","onChange","target","Recipe","key","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gOAwBeA,EAtBD,SAAC,GACd,IADeC,EAChB,EADgBA,MAAMC,EACtB,EADsBA,MAAMC,EAC5B,EAD4BA,YAExB,OACJ,yBAAKC,UAAU,OACf,yBAAKA,UAAU,QAAQC,IAAKH,EAAOI,IAAI,KACnC,wBAAIF,UAAU,SAASH,GAG3B,wBAAIG,UAAU,QACTD,EAAYI,KAAI,SAAAC,GAAU,OACvB,4BACKA,EAAWC,YCuDTC,G,MA7DJ,WAET,IAFe,EAKWC,mBAAS,IALpB,mBAKXC,EALW,KAKFC,EALE,OAMOF,mBAAS,IANhB,mBAMXG,EANW,KAMJC,EANI,OAOKJ,mBAAS,IAPd,mBAOXK,EAPW,KAOLC,EAPK,KAUfC,qBAAU,YACQ,uCAAE,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCJ,EAApC,mBAVlB,WAUkB,oBATlB,uCAQM,cACVK,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBV,EAAYU,EAAKC,MACjBC,QAAQC,IAAIH,EAAKC,MAJD,2CAAF,qDAMhBG,KAEC,CAACX,IAoBJ,OAEA,yBAAKZ,UAAU,OACf,wBAAIA,UAAU,QAAd,WACE,0BAAMA,UAAU,cAAcwB,SAdhB,SAAAC,GAEhBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,MAYN,2BAAOX,UAAU,aAAa2B,KAAK,OAAOC,MAAOlB,EAAQmB,SArB1C,SAAAJ,GAClBd,EAAUc,EAAEK,OAAOF,OACnBP,QAAQC,IAAI,aAoBT,4BAAQtB,UAAU,gBAAgB2B,KAAK,UAAvC,WAED,yBAAK3B,UAAU,WACdQ,EAASL,KAAI,SAAA4B,GAAM,OACrB,kBAAC,EAAD,CACAC,IAAKD,EAAOE,OAAOC,MACnBrC,MAAOkC,EAAOE,OAAOC,MACrBpC,MAAOiC,EAAOE,OAAOnC,MACrBC,YAAagC,EAAOE,OAAOlC,iBAN1B,QC3CeoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.a6c34583.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Recipes=({title,image,ingredients})=>\r\n{\r\n    return(\r\n<div className=\"res\">\r\n<img className=\"image\" src={image} alt=\"\"/>\r\n    <h1 className=\"title\">{title}</h1>\r\n    \r\n\r\n<ol className=\"list\">\r\n    {ingredients.map(ingredient=>(\r\n        <li>\r\n            {ingredient.text}\r\n        </li>\r\n    ))}\r\n</ol>\r\n\r\n    </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Recipes;","import React,{useEffect,useState} from 'react';\n\nimport Recipes from './recipes';\n\nimport \"./App.css\";\n\n\nconst App =() => {\n\n  const APP_ID =\"31fd5da2\";\n  const APP_KEY=\"4a37133e46e1444852992a78c822d48b\t\";\n\nconst[recipies,setRecipies]=useState([]);\nconst[search,setSearch]=useState(\"\");\nconst[query,setQuery]=useState('');\n\n\n  useEffect(()=>{\n    const getRecipes= async()=>{\n      const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n      const data = await response.json();\n      setRecipies(data.hits);\n      console.log(data.hits);\n    }\n    getRecipes();   \n    \n  }, [query]);\n\n\n\n\nconst updateSearch = e=>{\n   setSearch(e.target.value);\n   console.log(\"search\");\n}\n\nconst getSearch = e =>\n{\n  e.preventDefault();\n  setQuery(search);\n  setSearch('');\n}\n\n\n\n\n  return (\n    \n  <div className=\"app\">\n  <h1 className=\"head\">recipes</h1>\n    <form className=\"search-form\" onSubmit={getSearch}>\n    \n      <input className=\"Search-bar\" type=\"text\" value={search} onChange={updateSearch}/> \n      <button className=\"search-button\" type=\"submit\">SUBMIT</button>\n     </form>\n     <div className=\"content\">\n     {recipies.map(Recipe=>(\n    <Recipes \n    key={Recipe.recipe.label}\n    title={Recipe.recipe.label} \n    image={Recipe.recipe.image}\n    ingredients={Recipe.recipe.ingredients} /> ))\n     }; \n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}